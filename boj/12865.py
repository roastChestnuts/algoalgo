#물품의 수 N
#가져갈 수 있는 무게 K
#물건의 가치 V
#물건의 무게 W

#N개의 물품 중 선택한 물건들 무게의 합이 K를 넘지 않으면서 최대한의 가치V를 창출하는 경우를 찾아야 함


# 문제
# 이 문제는 아주 평범한 배낭에 관한 문제이다.

# 한 달 후면 국가의 부름을 받게 되는 준서는 여행을 가려고 한다. 
# 세상과의 단절을 슬퍼하며 최대한 즐기기 위한 여행이기 때문에, 가지고 다닐 배낭 또한 최대한 가치 있게 싸려고 한다.

# 준서가 여행에 필요하다고 생각하는 N개의 물건이 있다. 
# 각 물건은 무게 W와 가치 V를 가지는데, 해당 물건을 배낭에 넣어서 가면 준서가 V만큼 즐길 수 있다. 
# 아직 행군을 해본 적이 없는 준서는 최대 K만큼의 무게만을 넣을 수 있는 배낭만 들고 다닐 수 있다. 
# 준서가 최대한 즐거운 여행을 하기 위해 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 알려주자.

# 입력
# 첫 줄에 물품의 수 N(1 ≤ N ≤ 100)과 준서가 버틸 수 있는 무게 K(1 ≤ K ≤ 100,000)가 주어진다. 
# 두 번째 줄부터 N개의 줄에 거쳐 각 물건의 무게 W(1 ≤ W ≤ 100,000)와 해당 물건의 가치 V(0 ≤ V ≤ 1,000)가 주어진다.

# 입력으로 주어지는 모든 수는 정수이다.

# 출력
# 한 줄에 배낭에 넣을 수 있는 물건들의 가치합의 최댓값을 출력한다.

# 예제 입력 1 
# 4 7
# 6 13
# 4 8
# 3 6
# 5 12
# 예제 출력 1 
# 14

import sys

input = sys.stdin.readline

N, K = map(int, input().split())
items = list()
dp_result = [[0]*(K+1) for _ in range(N+1)] #첫번째 아이템을 순회할 때 이전 결과값이 필요하므로 N+1만큼의 리스트를 생성

for _ in range(N):
    items.append(tuple(map(int, input().split())))

for i in range(N):
    weight = items[i][0] #무게
    value = items[i][1] #가치
    for j in range(K+1):
        if weight > j:
            dp_result[i+1][j] = dp_result[i][j]
        else:
            dp_result[i+1][j] = max(dp_result[i][j], dp_result[i][j-weight] + value)    

print(dp_result[-1][-1])    
        
